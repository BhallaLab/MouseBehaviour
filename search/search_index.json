{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Various mouse behaviour protocols are implemented in this repository. See Run pipeline on how to use this pipeline. See Build pipeline section if you want to replicate this setup.","title":"Home"},{"location":"build_pipeline/","text":"You build this pipeline, you need various components. Softwares KiCAD FreeCAD python3.6+ GCC C++ Compiler cmake, git Hardwares Electrical PCB Electrical Components Mechanical 3D designs","title":"Build pipeline"},{"location":"build_pipeline/#softwares","text":"KiCAD FreeCAD python3.6+ GCC C++ Compiler cmake, git","title":"Softwares"},{"location":"build_pipeline/#hardwares","text":"","title":"Hardwares"},{"location":"build_pipeline/#electrical","text":"PCB Electrical Components","title":"Electrical"},{"location":"build_pipeline/#mechanical","text":"3D designs","title":"Mechanical"},{"location":"eda/","text":"Components Hardware Arduino Uno borad PointGrey camera CAD Electrical cad designs are in the folder CAD/EDA . It requires KiCAD version 5 or higher. The final PCB design is also available on various releases (one is available at https://github.com/BhallaLab/MouseBehaviour/releases/tag/v2019.07.10 ). And see the schematic . More information is available here . Run the pipeline","title":"Components"},{"location":"eda/#components","text":"","title":"Components"},{"location":"eda/#hardware","text":"Arduino Uno borad PointGrey camera","title":"Hardware"},{"location":"eda/#cad","text":"Electrical cad designs are in the folder CAD/EDA . It requires KiCAD version 5 or higher. The final PCB design is also available on various releases (one is available at https://github.com/BhallaLab/MouseBehaviour/releases/tag/v2019.07.10 ). And see the schematic . More information is available here .","title":"CAD"},{"location":"eda/#run-the-pipeline","text":"","title":"Run the pipeline"},{"location":"run_pipeline/","text":"Docker is the recommended to run this pipeline. To get the required image, execute docker pull bhallalab/mousebehaviour in the terminal. Installing Docker Installing and checking docker Follow these instruction to install docker . Also see these instructions for adding proxy support to docker. To check that docker works fine, execute following in the terminal. $ docker run hello-world I saw the following output. Unable to find image 'hello-world:latest' locally latest: Pulling from library/hello-world 1b930d010525: Pull complete Digest: sha256:6540fc08ee6e6b7b63468dc3317e3303aae178cb8a45ed3123180328bcc1d20f Status: Downloaded newer image for hello-world:latest Hello from Docker! . . Docker The docker image is available at https://hub.docker.com/r/bhallalab/mousebehavioum . You can get it by executing the following: $ docker pull bhallalab/mousebehaviour Before we run this image, we must make sure that docker can access devices connected to host computer. We also need to collect data generated inside the docker during experiment and save it to the host machine. Note Type xhost + once in the terminal. This makes docker to access graphics. You have to do it just once. Following command inside the terminal did the job for me. Make sure that camera and Arduino Uno board are connected to host computer. Camera requires USB3.0 if you want high frame rate. We were able to get 200 FPS. # camera and arduino must be connected. docker run --rm \\ --net=host --privileged \\ -v /dev:/dev \\ -e DISPLAY=$(DISPLAY) \\ -v /tmp/.X11-unix:/tmp/.X11-unix \\ -v $(HOME)/.Xauthority:/root/.Xauthority \\ -v $(HOME)/DATA:/root/DATA \\ -it bhallalab/mousebehaviour And voila, you should see this gui. More information is here . When in doubt, hover your mouse pointer on gui and a helpful message should pop-up (hopefully). Ubuntu 16.04 If you can't use docker, you can build and run the pipeline in Ubuntu-16.04 based system. The camera firmware version which we have used is compatible with Ubuntu-16.04. The vendor also supports Ubuntu-18.04 but we have not ported our code to this Ubuntu-18.04 yet. Create an admin account, say chuha (Hindi for mouse). Login. Add chuha to following groups: dialout To access arduino. pgrimaging To access PointGrey camera (Also see udev related note). Following script should do the job. $ sudo groupadd -f dialout $ sudo groupadd -f pgrimaging $ sudo usermod -a -G dialout,pgrimaging chuha Logout and login again. Changes to group takes effect on a fresh login. ( udev ) Add udev rules. We need them for accessing camera events. $ mkdir -p /etc/udev/rules.d $ echo \"SUBSYSTEM==\\\"usb\\\", GROUP=\\\"pgrimaging\\\"\" >/etc/udev/rules.d/40-pgr.rules $ /etc/init.d/udev restart Install python3.6. The GUI and analysis scripts requires python3.6 or higher. It is not available in official repositories, so we need to use a ppa. $ sudo add-apt-repository ppa:deadsnakes/ppa $ sudo apt-get update $ sudo apt-get install python3.6-tk python3.6-venv python3.6-dev Install required packages using apt . $ sudo apt-get install -y cmake g++ git $ sudo apt-get install -y libboost-all-dev libopencv-dev libserial-dev arduino-core Create python3.6 virtualenv and enable it. $ python3.6 -m venv ~/PY36 $ source ~/PY36/bin/activate To make sure that python3.6 becomes default python, add source ~/PY36/bin/activate to your ~/.bashrc or ~/.profile file. For more, see the official documentations https://docs.python.org/3.6/tutorial/venv.html Install required python packages. $ pip install -r matplotlib scipy tables screeninfo numpy pandas pyserial pysimplegui pillow One script to do this all This all is collected in one scripts ./scripts/bootstrap.sh . Use it at your own risk. And we are done. Lets launch the gui $ python gui.py . GUI GUI has two tabs. First is to analyse the tiff files generated during the session and, second one to run the session.","title":"Run pipeline"},{"location":"run_pipeline/#docker","text":"The docker image is available at https://hub.docker.com/r/bhallalab/mousebehavioum . You can get it by executing the following: $ docker pull bhallalab/mousebehaviour Before we run this image, we must make sure that docker can access devices connected to host computer. We also need to collect data generated inside the docker during experiment and save it to the host machine. Note Type xhost + once in the terminal. This makes docker to access graphics. You have to do it just once. Following command inside the terminal did the job for me. Make sure that camera and Arduino Uno board are connected to host computer. Camera requires USB3.0 if you want high frame rate. We were able to get 200 FPS. # camera and arduino must be connected. docker run --rm \\ --net=host --privileged \\ -v /dev:/dev \\ -e DISPLAY=$(DISPLAY) \\ -v /tmp/.X11-unix:/tmp/.X11-unix \\ -v $(HOME)/.Xauthority:/root/.Xauthority \\ -v $(HOME)/DATA:/root/DATA \\ -it bhallalab/mousebehaviour And voila, you should see this gui. More information is here . When in doubt, hover your mouse pointer on gui and a helpful message should pop-up (hopefully).","title":"Docker"},{"location":"run_pipeline/#ubuntu-1604","text":"If you can't use docker, you can build and run the pipeline in Ubuntu-16.04 based system. The camera firmware version which we have used is compatible with Ubuntu-16.04. The vendor also supports Ubuntu-18.04 but we have not ported our code to this Ubuntu-18.04 yet. Create an admin account, say chuha (Hindi for mouse). Login. Add chuha to following groups: dialout To access arduino. pgrimaging To access PointGrey camera (Also see udev related note). Following script should do the job. $ sudo groupadd -f dialout $ sudo groupadd -f pgrimaging $ sudo usermod -a -G dialout,pgrimaging chuha Logout and login again. Changes to group takes effect on a fresh login. ( udev ) Add udev rules. We need them for accessing camera events. $ mkdir -p /etc/udev/rules.d $ echo \"SUBSYSTEM==\\\"usb\\\", GROUP=\\\"pgrimaging\\\"\" >/etc/udev/rules.d/40-pgr.rules $ /etc/init.d/udev restart Install python3.6. The GUI and analysis scripts requires python3.6 or higher. It is not available in official repositories, so we need to use a ppa. $ sudo add-apt-repository ppa:deadsnakes/ppa $ sudo apt-get update $ sudo apt-get install python3.6-tk python3.6-venv python3.6-dev Install required packages using apt . $ sudo apt-get install -y cmake g++ git $ sudo apt-get install -y libboost-all-dev libopencv-dev libserial-dev arduino-core Create python3.6 virtualenv and enable it. $ python3.6 -m venv ~/PY36 $ source ~/PY36/bin/activate To make sure that python3.6 becomes default python, add source ~/PY36/bin/activate to your ~/.bashrc or ~/.profile file. For more, see the official documentations https://docs.python.org/3.6/tutorial/venv.html Install required python packages. $ pip install -r matplotlib scipy tables screeninfo numpy pandas pyserial pysimplegui pillow One script to do this all This all is collected in one scripts ./scripts/bootstrap.sh . Use it at your own risk. And we are done. Lets launch the gui $ python gui.py .","title":"Ubuntu 16.04"},{"location":"run_pipeline/#gui","text":"GUI has two tabs. First is to analyse the tiff files generated during the session and, second one to run the session.","title":"GUI"}]}