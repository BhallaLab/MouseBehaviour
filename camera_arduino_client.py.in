# -*- coding: utf-8 -*-

__author__     = "Dilawar Singh"
__copyright__  = "Copyright 2016, Dilawar Singh"
__credits__    = ["NCBS Bangalore"]
__license__    = "GNU GPL"
__version__    = "1.0.0"
__maintainer__ = "Dilawar Singh"
__email__      = ""
__status__     = "Development"

import sys
sys.path.append( '../pyblink' )
import math
import os
import socket
import io
import random
import time
import errno
import numpy as np
import cv2
from multiprocessing import Process, Value, Pipe
import datetime
import re
import config                           # in pyblink/config.py
import arduino
import readchar
from collections import defaultdict
import logging
import tifffile
import subprocess
import blinky
import gnuplotlib 
gnuplot = gnuplotlib.gnuplotlib(title='Data from cam/motor', terminal = 'x11 noraise')

logging.basicConfig(level=logging.INFO)

start_ = time.time()
total_trials_ = 0
cs_type_ = None
prev_trial_ = 0

# Frame and main window.
bbox_ = [(255,131), (521, 288)]
default_bbox_ = bbox_ 

camera_store_begin_ = 0
camera_store_end_ = 0

title_ = 'Animal Window'

def to_float( x ):
    try:
        x = eval( x )
        return x
    except Exception as e:
        return float( 'nan' )

def float_or_same(x):
    try:
        x = float(x)
    except Exception as e:
        pass
    return x

def onmouse(event, x, y, flags, params):
    global bbox_
    global default_bbox_ 
    # Draw Rectangle
    if event == cv2.EVENT_LBUTTONDOWN:
        bbox_ = []
        bbox_.append((x, y))

    elif event == cv2.EVENT_LBUTTONUP:
        if abs( x - bbox_[0][0] ) > 10 and abs( y - bbox_[0][1] ) >  10:
            bbox_.append((x, y))
            default_bbox_ = bbox_ 
        else:
            bbox_ = default_bbox_
            return 

        print( '[INFO] Current box %s' % bbox_ )

window_ = cv2.namedWindow( title_ )
cv2.setMouseCallback( title_, onmouse )

select_sent_ = False

running_trial_ = 0
finished_all_ = False

script_dir = os.path.dirname(os.path.realpath(__file__))
config_file = os.path.join(script_dir, 'config.h')

if not os.path.isfile(config_file):
    print("I can't find %s. Make sure it is available" % config_file)
    print(" Did you run cmake? ")
    quit()

h_, w_ = -1, -1

sock = None
with open(config_file, "r") as cf:
    configText = cf.read()
    h = re.search(r'#define\s+FRAME_HEIGHT\s+(\d+)', configText).group(1)
    w = re.search(r'#define\s+FRAME_WIDTH\s+(\d+)', configText).group(1)
    sock = re.search(r'#define\s+SOCK_PATH\s+\"(.+?)\"', configText).group(1)
    h_, w_ = int(h), int(w)

assert sock, "Can't read socket path from configuration file"
sock_name_ = sock
img_shape_ = (h_, w_)
frame_size_ = img_shape_[0] * img_shape_[1]
logging.info( 'FRAME SIZE %d' % frame_size_ )

# Maximum allowed frame in each trial. This is guard against RAM overflow in
# case arduino failes to update trial count. 
max_frames_in_trial = 1000
image_stack_ = None

write_data_ = True
now =  datetime.datetime.now().isoformat( )
data_dir_ = os.path.join( "@DATADIR@", '' )
trial_file_ = ''

# If data directory is already there, create a folder with timstamp to store
# data.
if not os.path.isdir(data_dir_):
    os.makedirs(data_dir_)
else:
    data_dir_ = os.path.join( "@DATADIR@", now )
    os.makedirs(data_dir_)



# Arduino data storate
def trial_file_path( trial = 0 ):
    filename = "name=%s_st=%s_sn=%s" % (
        config.args_.name, config.args_.cs_type, config.args_.session_num
            )
    filename += 'trial=%d.dat' % trial
    trial_file_ = os.path.join( data_dir_, filename )
    return trial_file_ 

def cleanup():
    global finished_all_
    finished_all_ = True
    config.serial_port_.write_msg(b'r')
    print("+++++++++++++++++++++++++++++ All over")


def append_trial_data(outfile, line ):
    with open(outfile, 'a') as f:
        f.write('%s\n' %  line )

def read_line():
    """Append timestamp at which this line was read 
    """
    now = datetime.datetime.now().isoformat().encode('utf8')
    line = config.serial_port_.read_line()
    line = now + b',' + line
    return line


def arduino_client(writeP, trialIndex, cameraPinValue):
    global running_trial_
    global cs_type_
    global next_probe_in_
    global select_sent_
    global finished_all_

    tstart = time.time()
    currentTrialIndex = 0

    while not finished_all_:
        line = read_line()
        logging.debug( '%s' % line )
        writeP.send(line)
        data = line_to_data(line)
        if len(data) < 10:
            continue
        code = data[2]
        trialNum = int(data[3])
        trialIndex.value = trialNum 
        # 5th from the last value in data line is camera.
        print(data)
        with cameraPinValue.get_lock():
            cameraPinValue.value = int(data[-5])
            assert cameraPinValue.value in [0,1], 'Invalid camera value'

        # NOTE: Write arduino data separately in a single file.
        append_trial_data(trial_file_path( trialNum ), line )
        if trialNum >= 101:
            finished_all_ = True

def init_arduino_client():
    """
    Wait for first four questions to appear which requires writing to serial
    port. If serial port is sending legal data then continue, questions are
    probably answered.
    """
    return True


def send_command():
    # This function must be last one 
    # the threads/processes have been launched before this is called first time.
    global select_sent_
    global finished_all_
    command = b""
    legalCommandsBeforeStart = [ b"t", b"s", b"p", b"l", b'1', b'2' ]
    legalCommandsAfterStart = [ ]
    validCommands = legalCommandsAfterStart + legalCommandsBeforeStart
    validStartChars = ''.join([x[0] for x in validCommands])
    print('[INFO] Executing send command loop')
    while True:
        # This is blocking.
        command = readchar.readkey()
        if command in validCommands:
            if command in legalCommandsBeforeStart and not select_sent_:
                logging.info("[COMMAND] Sending command: %s" % command)
                config.serial_port_.write_msg(command)
                if command == b's':
                    select_sent_ = True
        elif command in [ '\x03', '\x04', '\x1a']:
            finished_all_ = True
            break


def init_serial( baudRate=38400 ):
    if config.args_.port is None:
        config.args_.port = arduino.get_default_serial_port()
    logging.info("Using port: %s" % config.args_.port)
    config.serial_port_ = arduino.ArduinoPort(config.args_.port, baudRate)
    config.serial_port_.open(wait=True)


def line_to_data(line):
    """First element is timestamp, rest the data etc.
    """
    if b'>' in line:
        return [ ]

    line = line.decode('utf8', 'ignore')
    line = filter(lambda x:len(x.strip())>0, line.split(','))
    data = [float_or_same(x) for x in line]
    return data

def save_img_stack(stack, index):
    global start_
    filename = os.path.join(data_dir_, 'trial_%03d.tif' % index)
    tmpfile = os.path.join('/mnt', 'ramdisk', 'tmp.tif')
    # Remove empty frame.
    stack = np.array(filter(lambda x: np.sum(x)>2, stack))
    if len(stack) < 1:
        print( 'Zero frames in image. Not saving' )
        return 

    if tmpfile:
        tifffile.imsave(tmpfile, stack)
        # Use Popen to move the tmp file to desired location in background.
        t = time.time()
        subprocess.Popen([ "./copy_file.sh", tmpfile, filename ])
        print( 'Launched background process to copy data in %f' % ( time.time()
            - t ) )
    print('[INFO] Saved to %s after %s secs' % (filename, time.time() - start_))
    start_ = time.time()


def init_stack():
    """
    Set height to be 1 more than what is sent by camera for we'll add dataline
    recieved from arduino board as the first row of frame.
    """
    global image_stack_
    global h_, w_
    global max_frames_in_trial
    image_stack_ = np.zeros(
        shape=(max_frames_in_trial, h_+1, w_), dtype=np.uint8
    )


def poll_socket():
    return os.path.exists(sock_name_) 


def show_frame(frame, outfile=None):
    global title_
    cv2.imshow( title_, frame)
    cv2.waitKey(1)
    if outfile:
        cv2.imsave(outfile, frame)

def writeTextToFrame( txt, img ):
    global image_stack_, h_
    # Fill txt to have its length equal to frame width
    txt += ' ' * (img_shape_[1] - len(txt))
    # Convert txt to binary and prefix to the img we got from camera
    # server.
    metadata = np.fromstring(txt.decode('ascii', 'ignore'), dtype=np.uint8)
    img = np.vstack((metadata, img))
    cv2.putText(img, txt.strip()
            , (0, h_ - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.3, 200, 1
            )
    return img

def camera_client(readP, trialIndex, cameraPinValue):
    global finished_all_
    global img_, buf_
    global image_stack_

    # Camera socket 
    s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    s.settimeout(1)
    # Connect to socket. Try only for 5 seconds.
    stamp = time.time()
    connected = False
    while (not finished_all_) and (not connected):
        if (time.time() - stamp) > 5:
            logging.info('Timeout in connecting socket. Quitting')
            finished_all_ = True
            break
        try:
            logging.info( 'Trying to connect to %s' % sock_name_ )
            s.connect(sock_name_)
            connected = True
        except Exception as e:
            logging.error( 'Error was %s' % e )
            time.sleep(1)

    logging.info( 'Connected with camera server.' )
    totalBytesRead = 0
    totalFrames = 0
    buf = b''
    init_stack()
    framesInStack = 0
    trial_count = 0
    blinks_ = []
    speed_  = []
    writeTrial_ = False
    recording_ = False
    cameraPinState = [False, False]

    curSpeed = 0.0
    while not finished_all_:
        data = b''
        try:
            data = s.recv(frame_size_)
        except socket.timeout as e:
            logging.warn( 'Could not read from camera socket. Timed out' )
            continue
        buf += data
        if len(buf) >= frame_size_:
            now = datetime.datetime.now().isoformat().encode('utf8')
            img = np.frombuffer(buf[:frame_size_], dtype=np.uint8)
            img = np.reshape(img, img_shape_)
            txt = now

            # This is critical.
            # Read from PIPE but it should not be blocking.
            if readP.poll(1e-4):
                txt += b',' + readP.recv()
                data = line_to_data(txt)
                if len(data) > 10:
                    try:
                        curSpeed = float(data[-1])
                    except Exception as e:
                        print(e)

            if len(bbox_) == 2:
                # print( 'Bounding box has been drawn : %s' % str(bbox_) )
                cv2.rectangle(img, bbox_[0], bbox_[1], 128)
                (x0, y0), (x1, y1) = bbox_
                roi = img[y0:y1,x0:x1]
                # Equalize histogram
                roi = cv2.equalizeHist( roi )
                infile, outfile, res, sss = blinky.process_frame(roi, 0)
                #cv2.imshow( 'algo', outfile )
                # When camera pin goes HIGH, start writing trial.
                if cameraPinValue.value == 1:
                    msg = '%.2f (ON)'  % res
                    recording_ = True
                    cameraPinState.append( True )
                    cameraPinState.pop( 0 )
                else:
                    msg = '%.2f'  % res
                    cameraPinState.append( False )
                    cameraPinState.pop( 0 )

                if (not cameraPinState[1]) and cameraPinState[0]:
                    print( '[INFO] Write trial now' )
                    writeTrial_ = True
                    recording_ = False
                else:
                    writeTrial_ = False

                cv2.putText( img, msg, (0, 10 )
                         , cv2.FONT_HERSHEY_SIMPLEX, 0.4, 128, 2
                         )
                blinks_.append( res )
                speed_.append( curSpeed )
            else:
                blinks_.append( random.random( ) )
                speed_.append( curSpeed )

            # Append blink value to data.
            txt += b',%g' % blinks_[-1]
            # Fill txt to have its length equal to frame width
            txt += b' '*(img_shape_[1] - len(txt))
            #  logging.debug( txt )

            # Convert txt to binary and prefix to the img we got from camera
            # server.
            metadata = np.fromstring(txt.decode('ascii', 'replace'), dtype=np.uint8)
            img = np.vstack((metadata[:img.shape[1]], img))
            if write_data_:
                cv2.putText(img, txt.strip().decode('utf8', 'replace')
                        , (0,h_-10), cv2.FONT_HERSHEY_SIMPLEX,0.4,128,1)

            # Only save the frame if camera pin says so.
            if recording_:
                image_stack_[framesInStack] = img
                framesInStack += 1


            # Show every 15th frame.
            if totalFrames % 15 == 0:
                #  logging.debug( 'Showing frame %d' % totalFrames )
                show_frame( img )

                # Enable the following if you want to see the blink data on
                # separate plot window. Slows down frame rate a bit ~ 10 to
                # 20 FPS.
                if len(bbox_) == 2:
                    y1, y2 = np.array(blinks_[-2000:]), np.array(speed_[-2000:])
                    if len( blinks_ ) > 10:
                        try:
                            gnuplot.plot((np.arange(len(y1)), y1, { 'legend' : 'Camera'})
                                    , (np.arange(len(y2)), y2, {'legend' : 'Wheel'})
                                    )
                        except Exception as e:
                            logging.warn( 'Failed to launch gnuplot %s' % e )
            buf = buf[frame_size_:]

        totalFrames += 1
        # Write to file and set flag to OFF.
        if writeTrial_:
            framesInStack = 0
            writeTrial_ = False
            save_img_stack(image_stack_, trialIndex.value)
            init_stack()

        if framesInStack >= max_frames_in_trial:
            framesInStack = 0
            print( '[INFO] Too many frames in buffer.. flusing ' )
            save_img_stack(image_stack_, -1 )
            init_stack( )

def main():
    # Lock so that only one process prints to console at a time.
    # When daemon is set to True, all threads will exit (ungracefully) when main
    # terminates.
    global finished_all_

    config.init_logger(config.args_.port.replace('/', '_'))
    init_arduino_client()
    print('Initialized arduino board')

    # Variables to share between processes.
    trialIndex = Value('d', 0)
    cameraPinValue = Value( 'd', 0 )
    readP, writeP = Pipe(duplex=False)

    cam = Process(target=camera_client, args=(readP,trialIndex, cameraPinValue))
    cam.daemon = True
    cam.start()
    logging.info('Camera client launched')

    arduinoP = Process(target=arduino_client,
            args=(writeP, trialIndex, cameraPinValue)
            )
    arduinoP.daemon = True
    arduinoP.start()
    logging.info("Arduino client launched")

    try:
        send_command()
    except Exception as e:
        print('Got %s in send_comamnd' % e)
        finished_all_ = True
        arduinoP.join()
        cam.join()
        raise KeyboardInterrupt

    arduinoP.join()
    cam.join()
    print('All done. Raising Ctrl+C to cleanup.')
    raise KeyboardInterrupt

if __name__ == '__main__':
    import argparse
    description = '''Recieve data from serial port and camera as well.'''
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument(
        '--name',
        '-n',
        required=True,
        type=str,
        help='Mouse name (string)')
    parser.add_argument(
        '--cs-type',
        '-ct',
        required=True,
        type=str,
        help='CS Type [S, L, M]')
    parser.add_argument(
        '--session-num',
        '-sn',
        required=True,
        type=int,
        help='Session number (positive integer)')
    parser.add_argument(
        '--port',
        '-p',
        required=False,
        default=None,
        help='Serial port [full path]')

    parser.parse_args(namespace=config.args_)
    init_serial( baudRate = @BAUD_RATE@ )
    # Intialize logger after intializing serial port.
    try:
        main( )
    except KeyboardInterrupt as e:
        logging.warn("Interrupt from keyboard.... Quitting after cleanup.")
        cleanup()
        quit(1)
